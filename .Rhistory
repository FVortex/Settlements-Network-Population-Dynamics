clusters_18_metrics %>%
ggplot()+
geom_point(aes(x=mean, y=variation_dif, size = mean_pop))
clusters_18_metrics %>%
ggplot()+
geom_point(aes(x=mean, y=variation_dif))
clusters_18_metrics$mean <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
# Subset distance matrix
temp_dist <- dist_matrix_2002[select_condition, select_condition]
# Calculate mean of minimal distances
res <- apply(temp_dist, MARGIN = 1, FUN = function(x) x[x != 0] %>% mean()) %>% mean()
# Save to res col
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$mean <- res
}
View(clusters_18_metrics)
clusters_18_metrics %>%
ggplot()+
geom_point(aes(x=mean, y=variation_dif))
clusters_18_metrics %>%
ggplot(aes(x=mean, y=variation_dif))+
geom_point()+
geom_smooth()
clusters_18_metrics %>%
ggplot(aes(x=mean, y=variation_dif))+
geom_point()+
geom_smooth(method = "glm")
clusters_18_metrics$mean <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
# Subset distance matrix
temp_dist <- dist_matrix_2002[select_condition, select_condition]
# Calculate mean of minimal distances
res <- apply(temp_dist, MARGIN = 1, FUN = function(x) x[x != 0] %>% max()) %>% mean()
# Save to res col
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$mean <- res
}
clusters_18_metrics %>%
ggplot(aes(x=mean, y=variation_dif))+
geom_point()+
geom_smooth(method = "glm")
clusters_18_metrics$mean <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
# Subset distance matrix
temp_dist <- dist_matrix_2002[select_condition, select_condition]
# Calculate mean of minimal distances
res <- apply(temp_dist, MARGIN = 1, FUN = function(x) x[x != 0] %>% min()) %>% mean()
# Save to res col
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$mean <- res
}
clusters_18_metrics %>%
ggplot(aes(x=mean, y=variation_dif))+
geom_point()+
geom_smooth(method = "glm")
clusters_18_metrics$mean <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
# Subset distance matrix
temp_dist <- dist_matrix_2002[select_condition, select_condition]
# Calculate mean of minimal distances
res <- apply(temp_dist, MARGIN = 1, FUN = function(x) x[x != 0] %>% mean()) %>% max()
# Save to res col
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$mean <- res
}
clusters_18_metrics %>%
ggplot(aes(x=mean, y=variation_dif))+
geom_point()+
geom_smooth(method = "glm")
clusters_18_metrics$mean <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
# Subset distance matrix
temp_dist <- dist_matrix_2002[select_condition, select_condition]
# Calculate mean of minimal distances
res <- apply(temp_dist, MARGIN = 1, FUN = function(x) x[x != 0] %>% mean()) %>% min()
# Save to res col
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$mean <- res
}
clusters_18_metrics %>%
ggplot(aes(x=mean, y=variation_dif))+
geom_point()+
geom_smooth(method = "glm")
clusters_18_metrics$mean <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
# Subset distance matrix
temp_dist <- dist_matrix_2002[select_condition, select_condition]
# Calculate mean of minimal distances
res <- apply(temp_dist, MARGIN = 1, FUN = function(x) x[x != 0] %>% median()) %>% mean()
# Save to res col
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$mean <- res
}
clusters_18_metrics %>%
ggplot(aes(x=mean, y=variation_dif))+
geom_point()+
geom_smooth(method = "glm")
clusters_18_metrics %>%
ggplot(aes(x=mean, y=pop2010to2002_rel))+
geom_point()+
geom_smooth(method = "glm")
clusters_18_metrics %>%
ggplot(aes(x=mean, y=variation_dif))+
geom_point()+
geom_smooth(method = "glm")
clusters_18_metrics$mean <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
# Subset distance matrix
temp_dist <- dist_matrix_2002[select_condition, select_condition]
# Calculate mean of minimal distances
res <- apply(temp_dist, MARGIN = 1, FUN = function(x) x[x != 0] %>% median()) %>% median()
# Save to res col
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$mean <- res
}
clusters_18_metrics %>%
ggplot(aes(x=mean, y=variation_dif))+
geom_point()+
geom_smooth(method = "glm")
clusters_18_metrics$mean <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
# Subset distance matrix
temp_dist <- dist_matrix_2002[select_condition, select_condition]
# Calculate mean of minimal distances
res <- apply(temp_dist, MARGIN = 1, FUN = function(x) x[x != 0] %>% min()) %>% median()
# Save to res col
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$mean <- res
}
clusters_18_metrics %>%
ggplot(aes(x=mean, y=variation_dif))+
geom_point()+
geom_smooth(method = "glm")
temp_dist
mean(temp_dist)
res
clusters_18_metrics$mean <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
# Subset distance matrix
temp_dist <- dist_matrix_2002[select_condition, select_condition]
# Calculate mean of minimal distances
# res <- apply(temp_dist, MARGIN = 1, FUN = function(x) x[x != 0] %>% mean()) %>% median()
res <- mean(temp_dist)
# Save to res col
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$mean <- res
}
clusters_18_metrics %>%
ggplot(aes(x=mean, y=variation_dif))+
geom_point()+
geom_smooth(method = "glm")
View(clusters_18_metrics)
closeness(temp_dist)
select_condition
closeness(res_graph_2002, vids = settl_index_2002)
closeness(res_graph_2002, vids = settl_index_2002) %>% mean()
clusters_18_metrics$mean <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
# Subset distance matrix
temp_dist <- dist_matrix_2002[select_condition, select_condition]
# Calculate mean of minimal distances
# res <- apply(temp_dist, MARGIN = 1, FUN = function(x) x[x != 0] %>% mean()) %>% median()
# res <- mean(temp_dist)
res <- closeness(res_graph_2002, vids = settl_index_2002[select_condition]) %>% mean()
# Save to res col
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$mean <- res
}
clusters_18_metrics %>%
ggplot(aes(x=mean, y=variation_dif))+
geom_point()+
geom_smooth(method = "glm")
clusters_18_metrics$mean <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
# Subset distance matrix
temp_dist <- dist_matrix_2002[select_condition, select_condition]
# Calculate mean of minimal distances
# res <- apply(temp_dist, MARGIN = 1, FUN = function(x) x[x != 0] %>% mean()) %>% median()
# res <- mean(temp_dist)
res <- closeness(res_graph_2002, vids = settl_index_2002[select_condition]) %>% median() # кажется, эта штука работает
# Save to res col
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$mean <- res
}
clusters_18_metrics %>%
ggplot(aes(x=mean, y=variation_dif))+
geom_point()+
geom_smooth(method = "glm")
clusters_18_metrics %>%
ggplot()+
geom_point(aes(y=mean_pop, x=variation_dif, size = pop2010to2002_rel))+
geom_smooth(aes(y=mean_pop, x=variation_dif), method = "glm")+
scale_y_continuous(trans = "log2")+
scale_size_continuous(range = c(0.5, 4))
geom_point(aes(y=mean_pop, x=variation_dif)+
clusters_18_metrics %>%
ggplot()+
geom_point(aes(y=mean_pop, x=variation_dif))+
geom_smooth(aes(y=mean_pop, x=variation_dif), method = "glm")+
scale_y_continuous(trans = "log2")
clusters_18_metrics %>%
ggplot()+
geom_point(aes(y=mean_pop, x=variation_dif))+
geom_smooth(aes(y=mean_pop, x=variation_dif), method = "glm"))+
scale_y_continuous(trans = "log2")
clusters_18_metrics %>%
ggplot()+
geom_point(aes(y=mean_pop, x=variation_dif))+
geom_smooth(aes(y=mean_pop, x=variation_dif), method = "glm")+
scale_y_continuous(trans = "log2")
clusters_18_metrics %>%
ggplot()+
geom_point(aes(x=variation_dif, y=pop2010to2002_rel, size = mean_pop))+
geom_smooth(aes(x=variation_dif, y=pop2010to2002_rel), method = "glm")
clusters_18_metrics %>%
ggplot()+
geom_point(aes(y=mean_pop, x=variation_dif))+
geom_smooth(aes(y=mean_pop, x=variation_dif), method = "glm")+
scale_y_continuous(trans = "log2")
clusters_18_metrics %>%
ggplot(aes(x=mean, y=variation_dif))+
geom_point()+
geom_smooth(method = "glm")
clusters_18_metrics$distTyumen <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
settlements_temp <- df[select_condition,]
# Subset distance matrix: by row - cluster members, by column - Tyumen
distances_to_Tyumen <- dist_matrix_2002[select_condition, df$ShortName == "г. Тюмень"]
# Weight by population proportion
res <- sum(distances_to_Tyumen * settlements_temp$Census2002/sum(settlements_temp$Census2002))
# Save to res cell
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$distTyumen <- res
}
clusters_18_metrics %>%
ggplot(aes(x=distTyumen, y=variation_dif))+
geom_point()+
geom_smooth(method = "glm")
clusters_18_metrics %>%
ggplot(aes(x=distTyumen, y=pop2010to2002_rel))+
geom_point()+
geom_smooth(method = "glm")
i <- 1
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
select_condition
# Subset a graph
temp_graph <- subgraph(res_graph_2002, settl_index_2002[select_condition])
# Subset a graph
temp_graph <- induced_subgraph(res_graph_2002, settl_index_2002[select_condition])
temp_graph
# Centr_degree
res <- centr_degree(temp_graph, mode = "all")
res
clusters_18_metrics$centr_degree <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
# Subset a graph
temp_graph <- induced_subgraph(res_graph_2002, settl_index_2002[select_condition])
# Centr_degree
res <- centr_degree(temp_graph, mode = "all")
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$mean <- res$centralization
}
View(clusters_18_metrics)
clusters_18_metrics$centr_degree <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
# Subset a graph
temp_graph <- induced_subgraph(res_graph_2002, settl_index_2002[select_condition])
# Centr_degree
res <- centr_degree(temp_graph, mode = "all")
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$centr_degree <- res$centralization
}
clusters_18_metrics %>%
ggplot(aes(x=centr_degree, y=variation_dif))+
geom_point()+
geom_smooth(method = "glm")
clusters_18_metrics %>%
ggplot(aes(x=centr_degree, y=pop2010to2002_rel))+
geom_point()+
geom_smooth(method = "glm")
clusters_18_metrics %>%
ggplot(aes(x=centr_degree, y=variation_2002))+
geom_point()+
geom_smooth(method = "glm")
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
i <- 1
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
# Subset a graph
temp_graph <- induced_subgraph(res_graph_2002, settl_index_2002[select_condition])
# Centr_degree
res <- centralize(temp_graph)
# Centr_degree
res <- centr_clo(temp_graph)
res
# Subset a graph
temp_graph <- induced_subgraph(res_graph_2002, settl_index_2002[select_condition])
plot(temp_graph)
?induced_subgraph
# Subset a graph
temp_graph <- induced_subgraph(res_graph_2002, settl_index_2002[select_condition], impl = "copy_and_delete")
plot(temp_graph)
# Subset a graph
temp_graph <- induced_subgraph(res_graph_2002, settl_index_2002[select_condition],
impl = "create_from_scratch")
plot(temp_graph)
# Subset a graph
temp_graph <- subgraph(res_graph_2002, settl_index_2002[select_condition])
temp_graph
plot(temp_graph)
?centr_betw
settl_index_2002
vertices(res_graph_2002)
?E
test <- E(res_graph_2002)[settl_index_2002, directed = F]
test
temp_graph <- subgraph.edges(test)
temp_graph <- subgraph.edges(res_graph_2002, test)
temp_graph
plot(temp_graph)
test <- E(res_graph_2002, directed = F)[settl_index_2002[select_condition]]
temp_graph <- subgraph.edges(res_graph_2002, test)
plot(temp_graph)
temp_graph <- make_ego_graph(nodes = settl_index_2002[select_condition])
temp_graph <- make_ego_graph(res_graph_2002, nodes = settl_index_2002[select_condition])
plot(temp_graph)
temp_graph
test
test <- E(res_graph_2002, directed = F)[from(settl_index_2002[select_condition]) | to(settl_index_2002[select_condition])]
test
temp_graph <- subgraph.edges(res_graph_2002, test)
plot(temp_graph)
diameter(res_graph_2002)
degree(res_graph_2002, settl_index_2002[select_condition])
i <- 18
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
degree(res_graph_2002, settl_index_2002[select_condition])
plot(simplify(res_graph_2002))
simplify(res_graph_2002)
res_graph_2002
subgraph(simplify(res_graph_2002), settl_index_2002[select_condition]) %>% plot()
induced_subgraph(simplify(res_graph_2002), settl_index_2002[select_condition]) %>% plot()
library(sp)
library(sf)
library(raster)
library(rgdal)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(igraph)
library(leaflet)
library(RColorBrewer)
library(tidyr)
library(scales)
library(ggdendro)   # визуализация дендрограмм
library(viridis)
# load the data
load("data/Part1_output.RData")
# 1.1.1 Models
# d_1990 <- as.dist(dist_matrix_1990, diag = F)
d_2002 <- as.dist(dist_matrix_2002, diag = F)
d_2010 <- as.dist(dist_matrix_2010, diag = F)
# fit_1990 <- hclust(d_1990, method="ward.D")
fit_2002 <- hclust(d_2002, method="ward.D")
fit_2010 <- hclust(d_2010, method="ward.D")
# Сut tree into 3 and 6 clusters
# clust_3_1990 <- cutree(fit_1990, k=3)
clust_3_2002 <- cutree(fit_2002, k=3)
clust_6_2002 <- cutree(fit_2002, k=6)
# Дополним точечный слой данными о принадлежности к кластерам
settlements_2002@data %>%
mutate(clust_3 = clust_3_2002,
clust_6 = clust_6_2002) -> settlements_2002@data
clust_18_2002 <- cutree(fit_2002, k = 18)
# Дополним точечный слой данными о принадлежности к кластерам
settlements_2002@data %>%
mutate(clust_18 = clust_18_2002) -> settlements_2002@data
# Сохраним данные в новую переменную и очистим от лишних столбцов
df <- settlements_2002@data
df %>%
select(-cohort1981, -cohort1990, -cohort2002,
-trend_1981to1990, -trend_1990to2002,
-rel1981to1990, -rel1990to2002, -rel2002to2010) -> df
# Создадим переменные
clusters_18_metrics$variation_2002 <- NA_real_
clusters_18_metrics$variation_2010 <- NA_real_
df %>%
group_by(clust_18) %>%
mutate(pop2002 = sum(Census2002), pop2010 = sum(Census2010),
pop2010to2002_rel = pop2010/pop2002*100,         # отношение населения в 2010 году к населению в 2002
max_pop = max(Census2002),                       # величина крупнешего н.п.
mean_pop = mean(Census2002),                     # средний размер н.п.
sum_pop = sum(Census2002)) %>%                   # сумма населения кластера
select(clust_6, clust_18, pop2002, pop2010, pop2010to2002_rel, mean_pop, max_pop, sum_pop) %>%
unique() -> clusters_18_metrics                         # Сохраним результат в новый data.frame
# Создадим переменные
clusters_18_metrics$variation_2002 <- NA_real_
clusters_18_metrics$variation_2010 <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
settlements_temp <- df[select_condition,]
# Calculate variation (standart deviation(x)/mean(x))
# 2002
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$variation_2002 <-
sd(settlements_temp$Census2002, na.rm = T)/mean(settlements_temp$Census2002, na.rm = T)
# 2010
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$variation_2010 <-
sd(settlements_temp$Census2010, na.rm = T)/mean(settlements_temp$Census2010, na.rm = T)
}
# Calculate the difference in variance between 2002 and 2010
clusters_18_metrics %>%
mutate(variation_dif = variation_2010/variation_2002*100) ->
clusters_18_metrics
clusters_18_metrics %>%
ggplot()+
geom_point(aes(x=variation_dif, y=pop2010to2002_rel, size = mean_pop))+
geom_smooth(aes(x=variation_dif, y=pop2010to2002_rel), method = "glm")
clusters_18_metrics %>%
ggplot()+
geom_point(aes(y=mean_pop, x=variation_dif))+
geom_smooth(aes(y=mean_pop, x=variation_dif), method = "glm")+
scale_y_continuous(trans = "log2")
# Quick explorative analysis
# темпы сжатия расселения vs общая динамика населения
clusters_18_metrics %>%
ggplot()+
geom_point(aes(x=variation_dif, y=pop2010to2002_rel, size = mean_pop))+
geom_smooth(aes(x=variation_dif, y=pop2010to2002_rel), method = "glm")
# Темпы сжатия расселения vs общая динамика населения
clusters_18_metrics %>%
ggplot()+
geom_point(aes(y=mean_pop, x=variation_dif))+
geom_smooth(aes(y=mean_pop, x=variation_dif), method = "glm")+
scale_y_continuous(trans = "log2")
# Темпы сжатия расселения vs средний размер населенных пунктов
clusters_18_metrics %>%
ggplot()+
geom_point(aes(y=mean_pop, x=variation_dif))+
geom_smooth(aes(y=mean_pop, x=variation_dif), method = "glm")+
scale_y_continuous(trans = "log")
clusters_18_metrics$mean <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
# Subset distance matrix
temp_dist <- dist_matrix_2002[select_condition, select_condition]
# Calculate mean of minimal distances
# res <- apply(temp_dist, MARGIN = 1, FUN = function(x) x[x != 0] %>% mean()) %>% median()
# res <- mean(temp_dist)
res <- closeness(res_graph_2002, vids = settl_index_2002[select_condition]) %>% median() # кажется, эта штука работает !!!!!!
# Save to res col
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$mean <- res
}
clusters_18_metrics %>%
ggplot(aes(x=mean, y=variation_2002))+
geom_point()+
geom_smooth(method = "glm")
clusters_18_metrics %>%
ggplot(aes(x=mean, y=pop2010to2002_rel))+
geom_point()+
geom_smooth(method = "glm")
?density
?graph.density()
clusters_18_metrics$distTyumen <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
settlements_temp <- df[select_condition,]
# Subset distance matrix: by row - cluster members, by column - Tyumen
distances_to_Tyumen <- dist_matrix_2002[select_condition, df$ShortName == "г. Тюмень"]
# Weight by population proportion
res <- sum(distances_to_Tyumen * settlements_temp$Census2002/sum(settlements_temp$Census2002))
# Save to res cell
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$distTyumen <- res
}
clusters_18_metrics$dist2Tyumen <- NA_real_
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_18_2002 == i
settlements_temp <- df[select_condition,]
# Subset distance matrix: by row - cluster members, by column - Tyumen
distances_to_Tyumen <- dist_matrix_2002[select_condition, df$ShortName == "г. Тюмень"]
# Weight by population proportion
res <- sum(distances_to_Tyumen * settlements_temp$Census2002/sum(settlements_temp$Census2002))
# Save to res cell
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$dist2Tyumen <- res
}
clusters_18_metrics %>%
ggplot(aes(x=dist2Tyumen, y=pop2010to2002_rel))+
geom_point()+
geom_smooth(method = "glm")
?adjacent_vertices
adjacent_vertices(res_graph_2002, settl_index_2002)
