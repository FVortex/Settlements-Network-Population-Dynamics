# 1.1.1 Models
# d_1990 <- as.dist(dist_matrix_1990, diag = F)
d_2002 <- as.dist(dist_matrix_2002, diag = F)
d_2010 <- as.dist(dist_matrix_2010, diag = F)
# fit_1990 <- hclust(d_1990, method="ward.D")
fit_2002 <- hclust(d_2002, method="ward.D")
fit_2010 <- hclust(d_2010, method="ward.D")
fit_2002 <- dist_matrix_2002 %>%
as.dist(diag = F) %>%
hlust(method="ward.D")
library(sp)
library(sf)
library(raster)
library(rgdal)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(igraph)
library(leaflet)
library(RColorBrewer)
library(tidyr)
library(scales)
library(ggdendro)   # визуализация дендрограмм
library(viridis)
fit_2002 <- dist_matrix_2002 %>%
as.dist(diag = F) %>%
hclust(method="ward.D")
# load the data
load("data/Part1_output.RData")
# 1.1.1 Models
fit_2002 <- dist_matrix_2002 %>%
as.dist(diag = F) %>%
hclust(method="ward.D")
fit_2010 <- dist_matrix_2010 %>%
as.dist(diag = F) %>%
hclust(method="ward.D")
# Сut tree into 3 and 6 clusters
# clust_3_1990 <- cutree(fit_1990, k=3)
clust_3_2002 <- cutree(fit_2002, k=3)
clust_6_2002 <- cutree(fit_2002, k=6)
# Дополним точечный слой данными о принадлежности к кластерам
settlements_2002@data %>%
mutate(clust_3 = clust_3_2002,
clust_6 = clust_6_2002) -> settlements_2002@data
# 4.2.1. Кластеры районного уровня
clust_18_2002 <- cutree(fit_2002, k = 18)
# Дополним точечный слой данными о принадлежности к кластерам
settlements_2002@data %>%
mutate(clust_18 = clust_18_2002) -> settlements_2002@data
# Save the results to Rdata file
save("data/Part2_output.RData")
# Save the results to Rdata file
save.image("data/Part2_output.RData")
# Сохраним данные в новую переменную и очистим от лишних столбцов
df <- settlements_2002@data
df %>%
select(-cohort1981, -cohort1990, -cohort2002,
-trend_1981to1990, -trend_1990to2002,
-rel1981to1990, -rel1990to2002, -rel2002to2010) -> df
# ======================================
# 2.1. Descriptive metrics on population
df %>%
group_by(clust_6) %>%
mutate(CL6_pop2002 = sum(Census2002),                     # 2002 population
CL6_pop2010 = sum(Census2010),                     # 2010 population общая численность населения
CL6_pop2010to2002_rel = pop2010/pop2002*100,       # percentage of 2010-population to 2002-population
CL6_max_pop2002 = max(Census2002),                 # the largest settlement's size
CL6_mean_pop2002 = mean(Census2002),               # mean settlement's size
CL6_median_pop2002 = median(Census2002)) %>%       # median settlement's size
# select the columns we need
select(clust_6, CL6_pop2002, CL6_pop2010, CL6_pop2010to2002_rel,
CL6_max_pop2002, CL6_mean_pop2002, CL6_median_pop2002) %>% View()
# ======================================
# 2.1. Descriptive metrics on population
df %>%
group_by(clust_6) %>%
mutate(CL6_pop2002 = sum(Census2002),                        # 2002 population
CL6_pop2010 = sum(Census2010),                        # 2010 population общая численность населения
CL6_pop2010to2002_rel = CL6_pop2010/CL6_pop2002*100,  # percentage of 2010-population to 2002-population
CL6_max_pop2002 = max(Census2002),                    # the largest settlement's size
CL6_mean_pop2002 = mean(Census2002),                  # mean settlement's size
CL6_median_pop2002 = median(Census2002)) %>%          # median settlement's size
# select the columns we need
select(clust_6, CL6_pop2002, CL6_pop2010, CL6_pop2010to2002_rel,
CL6_max_pop2002, CL6_mean_pop2002, CL6_median_pop2002) %>% View()
unique() -> clusters_6_metrics    # Save the results into new data.frame
# ======================================
# 2.1. Descriptive metrics on population
df %>%
group_by(clust_6) %>%
mutate(CL6_pop2002 = sum(Census2002),                        # 2002 population
CL6_pop2010 = sum(Census2010),                        # 2010 population общая численность населения
CL6_pop2010to2002_rel = CL6_pop2010/CL6_pop2002*100,  # percentage of 2010-population to 2002-population
CL6_max_pop2002 = max(Census2002),                    # the largest settlement's size
CL6_mean_pop2002 = mean(Census2002),                  # mean settlement's size
CL6_median_pop2002 = median(Census2002)) %>%          # median settlement's size
# select the columns we need
select(clust_6, CL6_pop2002, CL6_pop2010, CL6_pop2010to2002_rel,
CL6_max_pop2002, CL6_mean_pop2002, CL6_median_pop2002) %>%
unique() -> clusters_6_metrics    # Save the results into new data.frame
View(clusters_6_metrics)
# Создадим переменные
clusters_6_metrics$variation_2002 <- NA_real_
clusters_6_metrics$variation_2010 <- NA_real_
for (i in 1:nrow(clusters_6_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_6_2002 == i
settlements_temp <- df[select_condition,]
# Calculate variation (standart deviation(x)/mean(x))
# 2002
clusters_6_metrics[clusters_6_metrics$clust_6 == i,]$variation_2002 <-
sd(settlements_temp$Census2002, na.rm = T)/mean(settlements_temp$Census2002, na.rm = T)
# 2010
clusters_6_metrics[clusters_6_metrics$clust_6 == i,]$variation_2010 <-
sd(settlements_temp$Census2010, na.rm = T)/mean(settlements_temp$Census2010, na.rm = T)
}
# Создадим переменные
clusters_6_metrics$CL6_variation_2002 <- NA_real_
clusters_6_metrics$CL6_variation_2010 <- NA_real_
for (i in 1:nrow(clusters_6_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_6_2002 == i
settlements_temp <- df[select_condition,]
# Calculate variation (standart deviation(x)/mean(x))
# 2002
clusters_6_metrics[clusters_6_metrics$clust_6 == i,]$CL6_variation_2002 <-
sd(settlements_temp$Census2002, na.rm = T)/mean(settlements_temp$Census2002, na.rm = T)
# 2010
clusters_6_metrics[clusters_6_metrics$clust_6 == i,]$CL6_variation_2010 <-
sd(settlements_temp$Census2010, na.rm = T)/mean(settlements_temp$Census2010, na.rm = T)
}
# Calculate the difference in variance between 2002 and 2010 (темпы сжатия расселения)
clusters_6_metrics %>%
mutate(variation_dif = CL6_variation_2010/CL6_variation_2002*100) ->
clusters_6_metrics
# Calculate the difference in variance between 2002 and 2010 (темпы сжатия расселения)
clusters_6_metrics %>%
mutate(CL6_variation_dif = CL6_variation_2010/CL6_variation_2002*100) ->
clusters_6_metrics
# Темпы сжатия расселения vs общая динамика населения
clusters_6_metrics %>%
ggplot(aes(y=CL6_variation_dif, x=CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop))+
# geom_smooth(method = "glm")+
# scale_size_continuous(name = "Ср. размер\nн.п. (чел.)",
#                       breaks = c(0, 300, 500, 1000, 2000), trans = "sqrt",
#                       labels = c("<300", "300-499", "500-999", "1000-2000", ">8000"))+
# scale_y_continuous(name = "Динамика территориальной\nдифференциации расселения", breaks = seq(100, 115, 5),
#                    limits = c(100,115))+
scale_x_continuous(name = "Динамика населения (%)")
# Темпы сжатия расселения vs общая динамика населения
clusters_6_metrics %>%
ggplot(aes(y=CL6_variation_dif, x=CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
# geom_smooth(method = "glm")+
# scale_size_continuous(name = "Ср. размер\nн.п. (чел.)",
#                       breaks = c(0, 300, 500, 1000, 2000), trans = "sqrt",
#                       labels = c("<300", "300-499", "500-999", "1000-2000", ">8000"))+
# scale_y_continuous(name = "Динамика территориальной\nдифференциации расселения", breaks = seq(100, 115, 5),
#                    limits = c(100,115))+
scale_x_continuous(name = "Динамика населения (%)")
# Темпы сжатия расселения vs общая динамика населения
clusters_6_metrics %>%
ggplot(aes(x=CL6_variation_dif, y=CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
# geom_smooth(method = "glm")+
# scale_size_continuous(name = "Ср. размер\nн.п. (чел.)",
#                       breaks = c(0, 300, 500, 1000, 2000), trans = "sqrt",
#                       labels = c("<300", "300-499", "500-999", "1000-2000", ">8000"))+
# scale_y_continuous(name = "Динамика территориальной\nдифференциации расселения", breaks = seq(100, 115, 5),
#                    limits = c(100,115))+
scale_x_continuous(name = "Динамика населения (%)")
# Создадим переменные
clusters_6_metrics$CL6_variance_2002 <- NA_real_
clusters_6_metrics$CL6_variance_2010 <- NA_real_
for (i in 1:nrow(clusters_6_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_6_2002 == i
settlements_temp <- df[select_condition,]
# Calculate variation (standart deviation(x)/mean(x))
# 2002
clusters_6_metrics[clusters_6_metrics$clust_6 == i,]$CL6_variance_2002 <-
sd(settlements_temp$Census2002, na.rm = T)/mean(settlements_temp$Census2002, na.rm = T)
# 2010
clusters_6_metrics[clusters_6_metrics$clust_6 == i,]$CL6_variance_2010 <-
sd(settlements_temp$Census2010, na.rm = T)/mean(settlements_temp$Census2010, na.rm = T)
}
# Calculate the difference in variance between 2002 and 2010 (темпы сжатия расселения)
clusters_6_metrics %>%
mutate(CL6_variance_dif = CL6_variance_2010/CL6_variance_2002*100) ->
clusters_6_metrics
# Темпы сжатия расселения vs общая динамика населения
clusters_6_metrics %>%
ggplot(aes(x=CL6_variance_dif, y=CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
# geom_smooth(method = "glm")+
# scale_size_continuous(name = "Ср. размер\nн.п. (чел.)",
#                       breaks = c(0, 300, 500, 1000, 2000), trans = "sqrt",
#                       labels = c("<300", "300-499", "500-999", "1000-2000", ">8000"))+
# scale_y_continuous(name = "Динамика территориальной\nдифференциации расселения", breaks = seq(100, 115, 5),
#                    limits = c(100,115))+
scale_x_continuous(name = "Variance")
# Темпы сжатия расселения vs общая динамика населения
clusters_6_metrics %>%
ggplot(aes(y=CL6_variance_dif, x=CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
# geom_smooth(method = "glm")+
# scale_size_continuous(name = "Ср. размер\nн.п. (чел.)",
#                       breaks = c(0, 300, 500, 1000, 2000), trans = "sqrt",
#                       labels = c("<300", "300-499", "500-999", "1000-2000", ">8000"))+
# scale_y_continuous(name = "Динамика территориальной\nдифференциации расселения", breaks = seq(100, 115, 5),
#                    limits = c(100,115))+
scale_x_continuous(name = "Variance")
# Темпы сжатия расселения vs общая динамика населения
clusters_6_metrics %>%
ggplot(aes(y=CL6_variance_dif, x=CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
# geom_smooth(method = "glm")+
# scale_size_continuous(name = "Ср. размер\nн.п. (чел.)",
#                       breaks = c(0, 300, 500, 1000, 2000), trans = "sqrt",
#                       labels = c("<300", "300-499", "500-999", "1000-2000", ">8000"))+
# scale_y_continuous(name = "Динамика территориальной\nдифференциации расселения", breaks = seq(100, 115, 5),
#                    limits = c(100,115))+
scale_x_continuous(name = "Population Ratio")
# Темпы сжатия расселения vs общая динамика населения
clusters_6_metrics %>%
ggplot(aes(y=CL6_variance_dif, x=CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
geom_smooth(method = "glm")+
# scale_size_continuous(name = "Ср. размер\nн.п. (чел.)",
#                       breaks = c(0, 300, 500, 1000, 2000), trans = "sqrt",
#                       labels = c("<300", "300-499", "500-999", "1000-2000", ">8000"))+
# scale_y_continuous(name = "Динамика территориальной\nдифференциации расселения", breaks = seq(100, 115, 5),
#                    limits = c(100,115))+
scale_x_continuous(name = "Population Ratio")
# Темпы сжатия расселения vs общая динамика населения
clusters_6_metrics %>%
ggplot(aes(y=CL6_variance_dif, x=CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
geom_smooth(method = "glm")+
scale_size_continuous(name = "Ср. размер\nн.п. (чел.)", breaks = c(0, 500, 1000))+
# scale_y_continuous(name = "Динамика территориальной\nдифференциации расселения", breaks = seq(100, 115, 5),
#                    limits = c(100,115))+
scale_x_continuous(name = "Population Ratio")
# Темпы сжатия расселения vs общая динамика населения
clusters_6_metrics %>%
ggplot(aes(y=CL6_variance_dif, x=CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
geom_smooth(method = "glm")+
scale_size_continuous(name = "Ср. размер\nн.п. (чел.)", breaks = c(0, 500, 1000))+
scale_y_continuous(name = "Динамика территориальной\nдифференциации расселения") +
scale_x_continuous(name = "Население в 2010 году к населению в 2002, %")
# Темпы сжатия расселения vs общая динамика населения
clusters_6_metrics %>%
ggplot(aes(y=CL6_variance_dif, x=CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
geom_smooth(method = "glm")+
scale_size_continuous(name = "Ср. размер\nн.п. (чел.)", breaks = c(0, 500, 1000, 2000))+
scale_y_continuous(name = "Динамика территориальной\nдифференциации расселения") +
scale_x_continuous(name = "Население в 2010 году к населению в 2002, %")
# Темпы сжатия расселения vs общая динамика населения
clusters_6_metrics %>%
ggplot(aes(y=CL6_variance_dif, x=CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
geom_smooth(method = "glm")+
scale_size_continuous(name = "Ср. размер\nн.п. (чел.)", breaks = c(0, 500, 2000))+
scale_y_continuous(name = "Динамика территориальной\nдифференциации расселения") +
scale_x_continuous(name = "Население в 2010 году к населению в 2002, %")
# Темпы сжатия расселения vs общая динамика населения
clusters_6_metrics %>%
ggplot(aes(y=CL6_variance_dif, x=CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
geom_smooth(method = "glm")+
scale_size_continuous(name = "Ср. размер\nн.п. (чел.)", breaks = c(300, 500, 2000))+
scale_y_continuous(name = "Динамика территориальной\nдифференциации расселения") +
scale_x_continuous(name = "Население в 2010 году к населению в 2002, %")
# Темпы сжатия расселения vs общая динамика населения
clusters_6_metrics %>%
ggplot(aes(y=CL6_variance_dif, x=CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
geom_smooth(method = "glm")+
scale_size_continuous(name = "Ср. размер\nн.п. (чел.)", breaks = c(0, 300, 500, 2000))+
scale_y_continuous(name = "Динамика территориальной\nдифференциации расселения") +
scale_x_continuous(name = "Население в 2010 году к населению в 2002, %")
# Темпы сжатия расселения vs средний размер населенных пунктов
clusters_18_metrics %>%
ggplot()+
geom_point(aes(y=CL6_mean_pop2002, x=CL6_variance_dif))+
geom_smooth(aes(y=CL6_mean_pop2002, x=CL6_variance_dif), method = "glm")+
# scale_y_continuous(trans = "log")+
scale_x_continuous(name = "Изменение вариации")
# Темпы сжатия расселения vs средний размер населенных пунктов
clusters_6_metrics %>%
ggplot()+
geom_point(aes(y=CL6_mean_pop2002, x=CL6_variance_dif))+
geom_smooth(aes(y=CL6_mean_pop2002, x=CL6_variance_dif), method = "glm")+
# scale_y_continuous(trans = "log")+
scale_x_continuous(name = "Изменение вариации")
# 3.2.1. Quick explorative analysis
# Темпы сжатия расселения vs общая динамика населения
clusters_6_metrics %>%
ggplot(aes(y=CL6_variance_dif, x=CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
geom_smooth(method = "glm")+
scale_size_continuous(name = "Ср. размер\nн.п. (чел.)", breaks = c(0, 500, 2000))+
scale_y_continuous(name = "Динамика территориальной\nдифференциации расселения") +
scale_x_continuous(name = "Население в 2010 году к населению в 2002, %")
my_subgraph_function <- function(graph, nodes) {
# 1) сохраним в отдельный вектор номера всех вершин, лежащих между н.п.
# shortest_paths() возвращает именованный list длины @to,
# который содержит индексы всех вершин и ребер каждого пути
all_the_verticies <-
shortest_paths(graph = graph,        # igraph object
from = nodes,         # vertex ids from
to = nodes) %>%       # vertex ids to
.$vpath %>%                          # extract list of returned vertex ids
unlist()                             # unlist
# 2) выборка из графа
induced_subgraph(graph = graph,                        # igraph object
vids = all_the_verticies) %>%         # vertex ids
simplify() ->                                        # remove loop and multiple edges
sub_graph
return(sub_graph)
}
# Создадим переменную
clusters_6_metrics$CL6_density <- NA_real_
# Calculate
for (i in 1:nrow(clusters_6_metrics)) {
# Define logical vector to subset settlements by the cluster
select_condition <- clust_6_2002 == i
# Create subgraph
temp_graph <- my_subgraph_function(res_graph_2002, settl_index_2002[select_condition])
# Calculate edge_density
clusters_6_metrics[clusters_6_metrics$clust_6 == i,]$CL6_density <- edge_density(temp_graph)
}
# Quick explorative analysis:
# PopDynamics vs Density
clusters_6_metrics %>%
ggplot(aes(x = CL6_density, y = CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))
geom_smooth()+
geom_text(aes(x = CL6_density + 0.001, y = CL6_pop2010to2002_rel - 0.5, label = clust_6))
# Quick explorative analysis:
# PopDynamics vs Density
clusters_6_metrics %>%
ggplot(aes(x = CL6_density, y = CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
geom_smooth()+
geom_text(aes(x = CL6_density + 0.001, y = CL6_pop2010to2002_rel - 0.5, label = clust_6))
# Quick explorative analysis:
# PopDynamics vs Density
clusters_6_metrics %>%
ggplot(aes(x = CL6_density, y = CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
geom_smooth(method = "glm")+
geom_text(aes(x = CL6_density, y = CL6_pop2010to2002_rel - 1, label = clust_6))
# Quick explorative analysis:
# PopDynamics vs Density
clusters_6_metrics %>%
ggplot(aes(x = CL6_density, y = CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
geom_smooth(method = "loess")+
geom_text(aes(x = CL6_density, y = CL6_pop2010to2002_rel - 1, label = clust_6))
# Quick explorative analysis:
# PopDynamics vs Density
clusters_6_metrics %>%
ggplot(aes(x = CL6_density, y = CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
geom_smooth(col = "grey")+
geom_text(aes(x = CL6_density, y = CL6_pop2010to2002_rel - 1, label = clust_6))
# Var_dif vs Density
clusters_18_metrics %>%
ggplot(aes(x = CL6_density, y = CL6_variance_fif))+
# geom_smooth()+
geom_point(aes(size = CL6_mean_pop2002))+
geom_text(aes(x = CL6_density, y = CL6_variance_fif + 0.5,  label = clust_6))
# Var_dif vs Density
clusters_6_metrics %>%
ggplot(aes(x = CL6_density, y = CL6_variance_fif))+
# geom_smooth()+
geom_point(aes(size = CL6_mean_pop2002))+
geom_text(aes(x = CL6_density, y = CL6_variance_fif + 0.5,  label = clust_6))
# Var_dif vs Density
clusters_6_metrics %>%
ggplot(aes(x = CL6_density, y = CL6_variance_dif))+
# geom_smooth()+
geom_point(aes(size = CL6_mean_pop2002))+
geom_text(aes(x = CL6_density, y = CL6_variance_fif + 0.5,  label = clust_6))
# Var_dif vs Density
clusters_6_metrics %>%
ggplot(aes(x = CL6_density, y = CL6_variance_dif))+
# geom_smooth()+
geom_point(aes(size = CL6_mean_pop2002))+
geom_text(aes(x = CL6_density, y = CL6_variance_dif + 0.5,  label = clust_6))
View(df)
# Quick explorative analysis:
# PopDynamics vs Density
clusters_6_metrics %>%
ggplot(aes(x = CL6_density, y = CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
geom_smooth(col = "grey")+
geom_text(aes(x = CL6_density, y = CL6_pop2010to2002_rel - 1, label = clust_6))
# Quick explorative analysis:
# PopDynamics vs Density
clusters_6_metrics %>%
ggplot(aes(x = CL6_density, y = CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
# geom_smooth(col = "grey")+
geom_text(aes(x = CL6_density, y = CL6_pop2010to2002_rel - 1, label = clust_6))
# Betweenness Centralisation
# Create column
clusters_6_metrics$CL6_centr_betw <- NA_real_
# Calculate
for (i in 1:nrow(clusters_6_metrics)) {
# Define logical vector to subset settlements by the cluster
select_condition <- clust_6_2002 == i
# Create subgraph
temp_graph <- my_subgraph_function(res_graph_2002, settl_index_2002[select_condition])
# Calculate edge_density
clusters_6_metrics[clusters_6_metrics$clust_6 == i,]$centr_betw <- centr_betw(temp_graph, normalized = T)$centralization
}
clusters_6_metrics[clusters_6_metrics$clust_6 == i,]
# Betweenness Centralisation
# Create column
clusters_6_metrics$CL6_centr_betw <- NA_real_
# Calculate
for (i in 1:nrow(clusters_6_metrics)) {
# Define logical vector to subset settlements by the cluster
select_condition <- clust_6_2002 == i
# Create subgraph
temp_graph <- my_subgraph_function(res_graph_2002, settl_index_2002[select_condition])
# Calculate edge_density
clusters_6_metrics[clusters_6_metrics$clust_6 == i,]$CL6_centr_betw <- centr_betw(temp_graph, normalized = T)$centralization
}
View(clusters_6_metrics)
View(df)
# Централизацию по близости
# Создадим переменную
clusters_6_metrics$CL6_centr_clo<- NA_real_
# Calculate
for (i in 1:nrow(clusters_6_metrics)) {
# Define logical vector to subset settlements by the cluster
select_condition <- clust_6_2002 == i
# Create subgraph
temp_graph <- my_subgraph_function(res_graph_2002, settl_index_2002[select_condition])
# Calculate edge_density
clusters_6_metrics[clusters_6_metrics$clust_6 == i,]$CL6_centr_clo <- centr_clo(temp_graph, normalized = T)$centralization
}
# Quick explorative analysis:
# Var_dif vs centr_betw
clusters_6_metrics %>%
ggplot(aes(x = CL6_centr_betw, y = CL6_variance_dif))+
# geom_smooth()+
geom_point(aes(size = CL6_mean_pop2002))+
geom_text(aes(x = CL6_centr_betw+0.001, y = CL6_variance_dif + 0.5, label = clust_6))
# Var_dif vs centr_betw
clusters_18_metrics %>%
ggplot(aes(x = CL6_centr_clo, y = CL6_variance_dif))+
# geom_smooth()+
geom_point(aes(size = CL6_mean_pop2002))+
geom_text(aes(x = centr_clo+0.001, y = variation_dif + 0.5, label = clust_18))
# Var_dif vs centr_betw
clusters_6_metrics %>%
ggplot(aes(x = CL6_centr_clo, y = CL6_variance_dif))+
# geom_smooth()+
geom_point(aes(size = CL6_mean_pop2002))+
geom_text(aes(x = centr_clo+0.001, y = variation_dif + 0.5, label = clust_18))
# Var_dif vs centr_betw
clusters_6_metrics %>%
ggplot(aes(x = CL6_centr_clo, y = CL6_variance_dif))+
# geom_smooth()+
geom_point(aes(size = CL6_mean_pop2002))+
geom_text(aes(x = centr_clo+0.001, y = variation_dif + 0.5, label = clust_6))
# Var_dif vs centr_betw
clusters_6_metrics %>%
ggplot(aes(x = CL6_centr_clo, y = CL6_variance_dif))+
# geom_smooth()+
geom_point(aes(size = CL6_mean_pop2002))+
geom_text(aes(x = CL6_centr_clo+0.001, y = CL6_variance_dif + 0.5, label = clust_6))
clusters_6_metrics$CL6_dist2Tyumen <- NA_real_
for (i in 1:nrow(clusters_6_metrics)) {
# Define logical vector to subset observations by the cluster
select_condition <- clust_6_2002 == i
settlements_temp <- df[select_condition,]
# Subset distance matrix: by row - cluster members, by column - Tyumen
distances_to_Tyumen <- dist_matrix_2002[select_condition, df$ShortName == "г. Тюмень"]
# Weight by population proportion
res <- sum(distances_to_Tyumen * settlements_temp$Census2002/sum(settlements_temp$Census2002))
# Save to res cell
clusters_6_metrics[clusters_6_metrics$clust_6 == i,]$CL6_dist2Tyumen <- res
}
# Quick explorative analysis
# Удаленность от Тюмени vs динамика населения
clusters_6_metrics %>%
ggplot(aes(x=CL6_dist2Tyumen/1000, y=CL6_pop2010to2002_rel, col = CL6_centr_betw))+
geom_point(aes(size = CL6_mean_pop2002))+
geom_smooth(method = "glm")+
scale_color_viridis_c()
# Quick explorative analysis
# Удаленность от Тюмени vs динамика населения
clusters_6_metrics %>%
ggplot(aes(x=CL6_dist2Tyumen/1000, y=CL6_pop2010to2002_rel))+
geom_point(aes(size = CL6_mean_pop2002))+
geom_smooth(method = "glm")+
scale_color_viridis_c()
# Quick explorative analysis
# Удаленность от Тюмени vs динамика населения
clusters_6_metrics %>%
ggplot(aes(x=CL6_dist2Tyumen/1000, y=CL6_pop2010to2002_rel))+
geom_point(aes())+
geom_smooth(method = "glm")+
scale_color_viridis_c()
